generator client {
  provider        = "prisma-client-js"
  output          = "./generated/client"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "inventory", "production", "public", "stock_control"]
}

model bottle_sizes {
  id             Int              @id @default(autoincrement())
  volume         String           @db.VarChar(10)
  product_prices product_prices[]

  @@schema("public")
}

model chemical_groups {
  group_id Int    @id @default(autoincrement())
  name     String @db.VarChar(30)

  @@schema("public")
}

model product_prices {
  product_id     Int
  bottle_size_id Int
  price          Decimal      @db.Decimal(10, 2)
  bottle_sizes   bottle_sizes @relation(fields: [bottle_size_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bottle_size")
  products       products     @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product")

  @@id([product_id, bottle_size_id])
  @@schema("public")
}

model products {
  product_id      Int              @id @default(autoincrement())
  name            String           @db.VarChar(50)
  sku             String           @unique(map: "product_sku_key") @db.VarChar(20)
  raw_material_id Int?
  grade           String           @db.VarChar(10)
  product_prices  product_prices[]
  raw_materials   raw_materials?   @relation(fields: [raw_material_id], references: [material_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_raw_material")

  @@schema("public")
}

model raw_materials {
  material_id                                                      Int                   @id @default(autoincrement())
  material_name                                                    String                @db.VarChar(100)
  cas_number                                                       String                @db.VarChar(20)
  chemical_group                                                   String?               @default("Hydrocarbon") @db.VarChar(50)
  description                                                      String?               @db.VarChar(150)
  un_code                                                          String?               @db.Char(4)
  flash_point                                                      Int?
  material_code                                                    String                @default("___") @db.VarChar(4)
  stock_new                                                        stock_new[]
  stock_order_details                                              stock_order_details[]
  stock_repro                                                      stock_repro[]
  supplier_materials_supplier_materials_material_idToraw_materials supplier_materials?   @relation("supplier_materials_material_idToraw_materials")
  supplier_materials_supplier_materials_supplier_idToraw_materials supplier_materials[]  @relation("supplier_materials_supplier_idToraw_materials")
  products                                                         products[]

  @@schema("public")
}

model suppliers {
  supplier_id   Int            @id @default(autoincrement())
  supplier_name String         @db.VarChar(50)
  addr_1        String?        @db.VarChar(20)
  addr_2        String?        @db.VarChar(30)
  city          String?        @db.VarChar(30)
  post_code     String?        @db.Char(7)
  country_code  String?        @db.Char(2)
  stock_new     stock_new[]
  stock_orders  stock_orders[]

  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model batches {
  batch_id        Int            @id(map: "internal_batches_pkey") @default(autoincrement())
  distillation_id Int?
  creation_date   DateTime?      @default(dbgenerated("CURRENT_DATE")) @db.Date
  batch_code      String?        @unique(map: "internal_batches_batch_code_key") @db.VarChar(50)
  grade           String?        @db.VarChar(5)
  quantity        Decimal?       @db.Decimal
  created_at      DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?      @default(now()) @db.Timestamptz(6)
  distillations   distillations? @relation(fields: [distillation_id], references: [distillation_id], onDelete: NoAction, onUpdate: NoAction, map: "internal_batches_distillation_id_fkey")

  @@schema("inventory")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model deliveries {
  delivery_id       Int            @id(map: "drum_deliveries_pkey") @default(autoincrement())
  order_id          Int
  quantity_received Int?           @default(0)
  date_received     DateTime       @default(dbgenerated("CURRENT_DATE")) @db.Date
  batch_code        String?        @db.VarChar(50)
  location          String         @default("new-site") @db.VarChar(15)
  delivery_notes    String?
  created_at        DateTime       @default(now()) @db.Timestamptz(6)
  updated_at        DateTime       @default(now()) @db.Timestamptz(6)
  is_finalised      Boolean        @default(false)
  orders            orders         @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction)
  transactions      transactions[]

  @@unique([order_id, batch_code], map: "unique_order_batch")
  @@schema("inventory")
}

model distillations {
  distillation_id    Int                  @id @default(autoincrement())
  loading_date       DateTime?            @default(dbgenerated("CURRENT_DATE")) @db.Date
  start_date         DateTime?            @db.Date
  still_code         String?              @db.Char(1)
  volume_in          Decimal?             @default(200) @db.Decimal
  transporter        String?              @db.Char(2)
  loader             String?              @db.Char(2)
  operator           String?              @db.Char(2)
  completion_date    DateTime?            @db.Date
  volume_in_spec     Decimal?             @default(0) @db.Decimal
  volume_repro       Decimal?             @default(0) @db.Decimal
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?            @default(now()) @db.Timestamptz(6)
  batches            batches[]
  repro_additions    repro_additions[]
  drum_distillations drum_distillations[]

  @@schema("inventory")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model new_drums {
  drum_id            Int                  @id(map: "drums_pkey") @default(autoincrement())
  material           String               @db.VarChar(100)
  date_processed     DateTime?            @db.Date
  status             String               @default("pending") @db.VarChar(20)
  location           String?              @default("new-site") @db.VarChar(20)
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  updated_at         DateTime             @default(now()) @db.Timestamptz(6)
  order_id           Int?
  orders             orders?              @relation(fields: [order_id], references: [order_id], onDelete: Cascade, onUpdate: NoAction)
  transactions       transactions[]
  drum_distillations drum_distillations[]

  @@index([material], map: "idx_drums_material_type")
  @@index([status], map: "idx_drums_status")
  @@schema("inventory")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model orders {
  order_id          Int          @id @default(autoincrement())
  supplier          String       @db.VarChar(100)
  material          String       @db.VarChar(100)
  quantity          Int
  date_ordered      DateTime     @default(dbgenerated("CURRENT_DATE")) @db.Date
  notes             String?
  created_at        DateTime     @default(now()) @db.Timestamptz(6)
  updated_at        DateTime     @default(now()) @db.Timestamptz(6)
  quantity_received Int          @default(0)
  status            String       @default("pending") @db.VarChar(20)
  eta_start         DateTime?    @db.Date
  eta_end           DateTime?    @db.Date
  po_number         String?      @db.VarChar(10)
  deliveries        deliveries[]
  new_drums         new_drums[]

  @@schema("inventory")
}

model repro_additions {
  addition_id     Int            @id @default(autoincrement())
  repro_drum_id   Int?
  distillation_id Int?
  date_added      DateTime?      @default(dbgenerated("CURRENT_DATE")) @db.Date
  volume_added    Int
  volume_in_drum  Int
  created_at      DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?      @default(now()) @db.Timestamptz(6)
  distillations   distillations? @relation(fields: [distillation_id], references: [distillation_id], onDelete: NoAction, onUpdate: NoAction)
  repro_drums     repro_drums?   @relation(fields: [repro_drum_id], references: [repro_drum_id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("inventory")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model repro_drums {
  repro_drum_id   Int               @id @default(autoincrement())
  date_created    DateTime          @default(dbgenerated("CURRENT_DATE")) @db.Date
  material        String            @db.VarChar(100)
  capacity        Int               @default(200)
  current_volume  Int               @default(0)
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?         @default(now()) @db.Timestamptz(6)
  status          String            @default("available") @db.VarChar(20)
  volume_status   String            @default("partial") @db.VarChar(20)
  notes           String?           @db.VarChar(20)
  location        String?           @default("TBD") @db.VarChar(20)
  repro_additions repro_additions[]
  transactions    transactions[]

  @@index([material], map: "idx_repro_drums_material_type")
  @@index([status], map: "idx_repro_drums_status")
  @@index([volume_status], map: "idx_repro_drums_volume_status")
  @@schema("inventory")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model transactions {
  tx_id       Int          @id @default(autoincrement())
  tx_type     String       @default("import") @db.VarChar(20)
  tx_date     DateTime     @default(dbgenerated("CURRENT_DATE")) @db.Date
  material    String       @db.VarChar(100)
  drum_id     Int?
  repro_id    Int?
  tx_notes    String?
  created_at  DateTime     @default(now()) @db.Timestamptz(6)
  updated_at  DateTime     @default(now()) @db.Timestamptz(6)
  process_id  Int?
  delivery_id Int?
  order_id    Int?
  direction   String?      @default(dbgenerated("\nCASE tx_type\n    WHEN 'intake'::text THEN 'IN'::text\n    WHEN 'scheduled'::text THEN NULL::text\n    WHEN 'loaded'::text THEN 'OUT'::text\n    WHEN 'processed'::text THEN NULL::text\n    WHEN 'failed'::text THEN 'IN'::text\n    WHEN 'requeued'::text THEN 'IN'::text\n    WHEN 'disposed'::text THEN 'OUT'::text\n    WHEN 'lost'::text THEN 'OUT'::text\n    WHEN 'cancelled'::text THEN NULL::text\n    ELSE NULL::text\nEND"))
  deliveries  deliveries?  @relation(fields: [delivery_id], references: [delivery_id], onDelete: Cascade, onUpdate: NoAction)
  new_drums   new_drums?   @relation(fields: [drum_id], references: [drum_id], onDelete: NoAction, onUpdate: NoAction)
  repro_drums repro_drums? @relation(fields: [repro_id], references: [repro_drum_id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("inventory")
}

model cleaning_records {
  cleaning_id Int     @id @default(autoincrement())
  still_code  String? @db.Char
  operator    String? @db.VarChar(10)
  checker     String? @db.VarChar(10)

  @@index([still_code], map: "fki_cleaning_still_code_fkey")
  @@schema("production")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model drum_distillations {
  drum_id         Int
  distillation_id Int
  fraction_used   Decimal       @default(1) @db.Decimal
  distillations   distillations @relation(fields: [distillation_id], references: [distillation_id], onDelete: NoAction, onUpdate: NoAction)
  new_drums       new_drums     @relation(fields: [drum_id], references: [drum_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([drum_id, distillation_id])
  @@schema("production")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model labs {
  lab_id              Int                   @id @default(autoincrement())
  lab_name            String                @db.VarChar(100)
  lab_site            String                @db.Char(3)
  description         String?
  operators_work_labs operators_work_labs[]
  stills              stills[]

  @@schema("production")
}

model operators_work_labs {
  operator_id Int
  lab_id      Int
  labs        labs      @relation(fields: [lab_id], references: [lab_id], onDelete: NoAction, onUpdate: NoAction)
  operators   employees @relation(fields: [operator_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([operator_id, lab_id])
  @@schema("production")
}

model output_records {
  output_id        Int       @id @default(autoincrement())
  production_id    Int?
  container_size   Int
  no_containers    Int
  grade            String?   @db.VarChar(10)
  batch_number     String?   @db.VarChar(10)
  destination      String?   @db.VarChar(100)
  labels_required  Int?
  labels_destroyed Int?
  start_time       DateTime? @db.Timestamp(6)
  end_time         DateTime? @db.Timestamp(6)
  start_temp       Decimal?  @db.Decimal(4, 1)
  completion_date  DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Date

  @@schema("production")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model pr_schedule {
  schedule_id     Int      @id @default(autoincrement())
  production_date DateTime @db.Date
  lab_site        String   @db.Char(3)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)

  @@unique([production_date, lab_site])
  @@schema("production")
}

model password_reset_tokens {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  token      String    @db.VarChar(255)
  expires_at DateTime  @db.Timestamptz(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, token])
  @@index([token], map: "idx_password_reset_tokens_token")
  @@schema("auth")
}

model sessions {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  token      String    @db.VarChar(255)
  expires_at DateTime  @db.Timestamptz(6)
  user_agent String?
  ip_address String?   @db.VarChar(45)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([token], map: "idx_sessions_token")
  @@schema("auth")
}

model users {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                 String                  @unique @db.VarChar(255)
  password_hash         String                  @db.VarChar(255)
  first_name            String                  @db.VarChar(100)
  last_name             String                  @db.VarChar(100)
  role                  String                  @default("USER") @db.VarChar(50)
  created_at            DateTime                @default(now()) @db.Timestamptz(6)
  updated_at            DateTime                @default(now()) @db.Timestamptz(6)
  password_reset_tokens password_reset_tokens[]
  sessions              sessions[]

  @@schema("auth")
}

model stock_control_distillations {
  distillation_id        Int      @id @default(autoincrement())
  still_id               Int      @unique
  start_time             DateTime @db.Timestamp(6)
  end_time               DateTime @db.Timestamp(6)
  total_input_volume     Decimal  @db.Decimal(10, 2)
  expected_output_volume Decimal  @db.Decimal(10, 2)
  actual_output_volume   Decimal  @db.Decimal(10, 2)
  loss_volume            Decimal  @db.Decimal(10, 2)

  @@map("distillations")
  @@schema("stock_control")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model drums {
  drum_id                  Int       @id @default(autoincrement())
  material_id              Int
  date_ordered             DateTime  @db.Timestamp(6)
  date_received            DateTime  @db.Timestamp(6)
  batch_code               String?   @db.VarChar(30)
  po_number                String?   @db.VarChar(30)
  status                   String?   @default("pending") @db.VarChar(20)
  scheduled                Boolean?  @default(false)
  reprocessed_from_drum_id Int?
  volume_remaining         Decimal   @db.Decimal(10, 2)
  created_at               DateTime? @default(now()) @db.Timestamptz(6)
  updated_at               DateTime? @default(now()) @db.Timestamptz(6)
  materials                materials @relation(fields: [material_id], references: [material_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_drums_material")
  drums                    drums?    @relation("drumsTodrums", fields: [reprocessed_from_drum_id], references: [drum_id], onUpdate: NoAction, map: "fk_drums_reprocessed")
  other_drums              drums[]   @relation("drumsTodrums")

  @@index([material_id], map: "idx_drums_material_id")
  @@index([status], map: "idx_drums_status")
  @@schema("stock_control")
}

model materials {
  material_id   Int       @id @default(autoincrement())
  name          String    @db.VarChar(100)
  chemical_type String?   @db.VarChar(50)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  drums         drums[]

  @@schema("stock_control")
}

model stock_control_suppliers {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)

  @@map("suppliers")
  @@schema("stock_control")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model stock_drums {
  drum_id                          Int                                @id @default(autoincrement())
  drum_type                        String                             @default("new")
  order_detail_id                  Int
  fill_level                       Decimal?                           @default(200) @db.Decimal(5, 2)
  status                           String                             @default("en route")
  created_at                       DateTime?                          @default(now()) @db.Timestamptz(6)
  updated_at                       DateTime?                          @default(now()) @db.Timestamptz(6)
  distillation_loading_log         distillation_loading_log[]
  distillation_pending_assignments distillation_pending_assignments[]
  distillation_transport_log       distillation_transport_log[]
  log_drum_scans                   log_drum_scans[]
  log_volume_transfers             log_volume_transfers[]
  stock_order_details              stock_order_details                @relation(fields: [order_detail_id], references: [detail_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([drum_id], map: "idx_stockdrums_drum_id")
  @@index([drum_id, status], map: "idx_stockdrums_drum_status")
  @@schema("inventory")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model stock_new {
  stock_id                       Int                              @id @default(autoincrement())
  material_id                    Int?
  supplier_id                    Int?
  material_description           String
  quantity                       Int
  batch_code                     String                           @unique
  location                       String?                          @db.VarChar(20)
  notes                          String?
  created_at                     DateTime?                        @default(now()) @db.Timestamp(6)
  updated_at                     DateTime?                        @default(now()) @db.Timestamp(6)
  distillation_schedules_details distillation_schedules_details[]
  raw_materials                  raw_materials?                   @relation(fields: [material_id], references: [material_id], onDelete: NoAction, onUpdate: NoAction)
  suppliers                      suppliers?                       @relation(fields: [supplier_id], references: [supplier_id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("inventory")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model stock_repro {
  stock_id                       Int                              @id @default(autoincrement())
  material_id                    Int?
  location                       String
  notes                          String?
  created_at                     DateTime?                        @default(now()) @db.Timestamp(6)
  updated_at                     DateTime?                        @default(now()) @db.Timestamp(6)
  quantity                       Int
  material_description           String?
  distillation_schedules_details distillation_schedules_details[]
  raw_materials                  raw_materials?                   @relation(fields: [material_id], references: [material_id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("inventory")
}

model active_context {
  context_id Int        @id @default(autoincrement())
  worker_id  Int?
  still_id   Int?
  created_at DateTime?  @default(now()) @db.Timestamptz(6)
  stills     stills?    @relation(fields: [still_id], references: [still_id], onDelete: NoAction)
  employees  employees? @relation(fields: [worker_id], references: [employee_id], onDelete: NoAction)

  @@schema("inventory")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model distillation_loading_log {
  loading_id             Int                    @id @default(autoincrement())
  scan_id                Int?                   @unique
  drum_id                Int?
  still_id               Int?
  distillation_id        Int
  status                 String?                @default("loaded")
  distillation_schedules distillation_schedules @relation(fields: [distillation_id], references: [distillation_id], onDelete: NoAction)
  stock_drums            stock_drums?           @relation(fields: [drum_id], references: [drum_id], onDelete: Restrict, onUpdate: NoAction)
  log_drum_scans         log_drum_scans?        @relation(fields: [scan_id], references: [scan_id], onDelete: Cascade, onUpdate: NoAction)
  stills                 stills?                @relation(fields: [still_id], references: [still_id], onDelete: Restrict, onUpdate: NoAction)

  @@index([drum_id], map: "idx_distload_drum")
  @@index([still_id, distillation_id], map: "idx_distload_still_distill")
  @@schema("inventory")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model distillation_pending_assignments {
  pending_id                 Int                        @id @default(autoincrement())
  drum_id                    Int?
  transport_id               Int
  assigned_distillation_id   Int?
  status                     String?                    @default("pending")
  distillation_schedules     distillation_schedules?    @relation(fields: [assigned_distillation_id], references: [distillation_id], onDelete: NoAction)
  stock_drums                stock_drums?               @relation(fields: [drum_id], references: [drum_id], onDelete: Restrict, onUpdate: NoAction)
  distillation_transport_log distillation_transport_log @relation(fields: [transport_id], references: [transport_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([assigned_distillation_id], map: "idx_pendingassign_distillation")
  @@index([drum_id], map: "idx_pendingassign_drum")
  @@schema("inventory")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model distillation_records {
  record_id              Int                     @id @default(autoincrement())
  distillation_id        Int?                    @unique
  actual_start           DateTime?               @default(now()) @db.Timestamptz(6)
  actual_end             DateTime?               @db.Timestamptz(6)
  status                 String?                 @default("in_progress")
  notes                  String?
  distillation_schedules distillation_schedules? @relation(fields: [distillation_id], references: [distillation_id], onDelete: Cascade)

  @@index([actual_start], map: "idx_distrecords_start")
  @@schema("inventory")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model distillation_schedules {
  distillation_id                  Int                                @id @default(autoincrement())
  scheduled_date                   DateTime                           @db.Date
  still_id                         Int
  expected_drum_qty                Decimal                            @default(1.00) @db.Decimal(5, 2)
  status                           String?                            @default("scheduled")
  created_at                       DateTime?                          @default(now()) @db.Timestamptz(6)
  updated_at                       DateTime?                          @default(now()) @db.Timestamptz(6)
  distillation_loading_log         distillation_loading_log[]
  distillation_pending_assignments distillation_pending_assignments[]
  distillation_records             distillation_records?
  stills                           stills                             @relation(fields: [still_id], references: [still_id])
  distillation_schedules_details   distillation_schedules_details[]
  distillation_start_log           distillation_start_log?
  distillation_transport_log       distillation_transport_log[]
  log_volume_transfers             log_volume_transfers[]

  @@index([scheduled_date, status], map: "idx_distsched_date_status")
  @@index([still_id], map: "idx_distsched_still")
  @@schema("inventory")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model distillation_schedules_details {
  details_id             Int                    @id @default(autoincrement())
  distillation_id        Int
  new_stock_id           Int?
  repro_stock_id         Int?
  drum_quantity          Decimal                @db.Decimal(5, 2)
  status                 String?                @default("pending")
  created_at             DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?              @default(now()) @db.Timestamptz(6)
  distillation_schedules distillation_schedules @relation(fields: [distillation_id], references: [distillation_id], onDelete: Cascade)
  stock_new              stock_new?             @relation(fields: [new_stock_id], references: [stock_id], onUpdate: NoAction)
  stock_repro            stock_repro?           @relation(fields: [repro_stock_id], references: [stock_id], onUpdate: NoAction)

  @@schema("inventory")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model distillation_start_log {
  start_id               Int                     @id @default(autoincrement())
  distillation_id        Int?                    @unique
  still_id               Int
  worker_id              Int?
  status                 String?                 @default("started")
  distillation_schedules distillation_schedules? @relation(fields: [distillation_id], references: [distillation_id], onDelete: Restrict)
  stills                 stills                  @relation(fields: [still_id], references: [still_id], onDelete: NoAction)
  employees              employees?              @relation(fields: [worker_id], references: [employee_id], onDelete: NoAction)

  @@index([distillation_id], map: "idx_diststart_distill")
  @@schema("inventory")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model distillation_transport_log {
  transport_id                     Int                                @id @default(autoincrement())
  scan_id                          Int?                               @unique
  drum_id                          Int?
  transported_at                   DateTime?                          @default(now()) @db.Timestamptz(6)
  distillation_id                  Int?
  status                           String?                            @default("in-transit")
  distillation_pending_assignments distillation_pending_assignments[]
  distillation_schedules           distillation_schedules?            @relation(fields: [distillation_id], references: [distillation_id], onDelete: NoAction)
  stock_drums                      stock_drums?                       @relation(fields: [drum_id], references: [drum_id], onDelete: Restrict, onUpdate: NoAction)
  log_drum_scans                   log_drum_scans?                    @relation(fields: [scan_id], references: [scan_id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("inventory")
}

model log_drum_decommission {
  decommission_id   Int        @id @default(autoincrement())
  drum_id           Int
  decommissioned_at DateTime?  @default(now()) @db.Timestamptz(6)
  worker_id         Int?       @default(9)
  employees         employees? @relation(fields: [worker_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("inventory")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model log_drum_scans {
  scan_id                    Int                         @id(map: "scan_log_pkey") @default(autoincrement())
  scanned_at                 DateTime?                   @default(now()) @db.Timestamptz(6)
  drum_id                    Int?
  worker_id                  Int                         @default(9)
  scan_type                  String
  scan_status                String                      @default("success")
  error_message              String?
  distillation_loading_log   distillation_loading_log?
  distillation_transport_log distillation_transport_log?
  stock_drums                stock_drums?                @relation(fields: [drum_id], references: [drum_id], onDelete: NoAction, map: "scan_log_drum_id_fkey")
  employees                  employees                   @relation(fields: [worker_id], references: [employee_id], onDelete: NoAction, map: "scan_log_worker_id_fkey")

  @@index([drum_id], map: "idx_scanlog_drum_id")
  @@index([scan_id], map: "idx_scanlog_scan_id")
  @@schema("inventory")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model log_volume_transfers {
  transfer_id            Int                    @id @default(autoincrement())
  drum_id                Int
  distillation_id        Int
  volume_transferred     Decimal                @db.Decimal(7, 2)
  remaining_volume       Decimal                @db.Decimal(7, 2)
  usage_type             String
  transfer_timestamp     DateTime?              @default(now()) @db.Timestamptz(6)
  worker_id              Int?                   @default(9)
  distillation_schedules distillation_schedules @relation(fields: [distillation_id], references: [distillation_id], onDelete: Cascade)
  stock_drums            stock_drums            @relation(fields: [drum_id], references: [drum_id], onDelete: Cascade, onUpdate: NoAction)
  employees              employees?             @relation(fields: [worker_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("inventory")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model notifications {
  notification_id Int        @id @default(autoincrement())
  message         String
  message_type    String     @default("info")
  private         Boolean    @default(false)
  worker_id       Int?
  audience_type   String?    @default("all")
  is_read         Boolean    @default(false)
  created_at      DateTime?  @default(now()) @db.Timestamptz(6)
  expires_at      DateTime?  @db.Timestamptz(6)
  employees       employees? @relation(fields: [worker_id], references: [employee_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([audience_type], map: "idx_notifications_audience")
  @@index([worker_id], map: "idx_notifications_worker_id")
  @@schema("inventory")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model stock_order_details {
  detail_id            Int           @id @default(autoincrement())
  order_id             Int
  batch_code           String?
  material_id          Int
  material_description String
  drum_quantity        Int
  drum_weight          Decimal?      @db.Decimal(6, 2)
  drum_volume          Decimal?      @default(dbgenerated("\nCASE\n    WHEN (drum_weight IS NULL) THEN NULL::numeric\n    ELSE mass_to_volume(material_id, drum_weight)\nEND")) @db.Decimal(6, 2)
  status               String        @default("en route")
  notes                String?
  stock_drums          stock_drums[]
  raw_materials        raw_materials @relation(fields: [material_id], references: [material_id], onUpdate: NoAction)
  stock_orders         stock_orders  @relation(fields: [order_id], references: [order_id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("inventory")
}

model stock_orders {
  order_id            Int                       @id @default(autoincrement())
  po_number           String?
  date_ordered        DateTime                  @default(dbgenerated("CURRENT_DATE")) @db.Date
  supplier_id         Int
  eta                 Unsupported("daterange")?
  notes               String?
  supplier            String?
  stock_order_details stock_order_details[]
  suppliers           suppliers                 @relation(fields: [supplier_id], references: [supplier_id], onUpdate: NoAction)

  @@schema("inventory")
}

model supplier_materials {
  material_id                                                 Int            @id(map: "stock_materials_pkey")
  supplier_id                                                 Int?
  material_name                                               String
  quantity                                                    Int
  location                                                    String         @db.VarChar(20)
  updated_at                                                  DateTime?      @default(now()) @db.Timestamp(6)
  raw_materials_supplier_materials_material_idToraw_materials raw_materials  @relation("supplier_materials_material_idToraw_materials", fields: [material_id], references: [material_id], onDelete: NoAction, onUpdate: NoAction, map: "stock_materials_material_id_fkey")
  raw_materials_supplier_materials_supplier_idToraw_materials raw_materials? @relation("supplier_materials_supplier_idToraw_materials", fields: [supplier_id], references: [material_id], onDelete: NoAction, onUpdate: NoAction, map: "stock_materials_supplier_id_fkey")

  @@schema("inventory")
}

model employees {
  employee_id            Int                      @id @default(autoincrement())
  first_name             String                   @db.VarChar(30)
  last_name              String?                  @db.VarChar(30)
  initials               String?                  @unique(map: "operators_initials_key") @db.VarChar(3)
  middle_names           String?                  @db.VarChar(100)
  active_context         active_context[]
  distillation_start_log distillation_start_log[]
  log_drum_decommission  log_drum_decommission[]
  log_drum_scans         log_drum_scans[]
  log_volume_transfers   log_volume_transfers[]
  notifications          notifications[]
  operators_work_labs    operators_work_labs[]

  @@schema("public")
}

model stills {
  still_id                 Int                        @id @default(autoincrement())
  still_code               String                     @unique @db.Char(1)
  max_capacity             Decimal                    @db.Decimal(2, 1)
  power_rating_kw          Int
  lab_id                   Int
  is_vacuum                Boolean
  is_operational           Boolean
  description              String?
  active_context           active_context[]
  distillation_loading_log distillation_loading_log[]
  distillation_schedules   distillation_schedules[]
  distillation_start_log   distillation_start_log[]
  labs                     labs                       @relation(fields: [lab_id], references: [lab_id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model temp_data {
  old_id         String?
  material_name  String?
  quantity       Int?
  supplier       String?
  batch          String?
  order_date     DateTime? @db.Date
  site           String?
  int_column     String?
  clerk_column   String?
  processed_date String?
  material_id    Int?
  supplier_id    Int?
  new_id         Int?

  @@ignore
  @@schema("public")
}
